# ======================================
# TOPOLOGY and EXTERNAL DEPENDENCIES
# ======================================
application:
  name: service-kotlin-basic
  broker:
    url: localhost:9092
    topics:
      subscriptions: app-subscriptions-async
  persistence:
    host: localhost
    port: 5432
    database: postgres
    username: postgres
    password: postgres
    #    url: postgresql://${application.persistence.host}:${application.persistence.port}/${application.persistence.database}
    url: h2:mem:///test?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

prefix:
  key1: value1

# ======================================
# Spring Boot
# ======================================
spring:
  application:
    name: ${application.name}

  # Broker
  kafka:
    bootstrap-servers: ${application.broker.url}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        spring.json:
#          add.type.headers: false
    consumer:
      group-id: consumer-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json:
          use.type.headers: false
          value.default.type: com.github.frtu.sample.basic.persistence.basic.AccountSubscriptionEntity
          trusted.packages: "*"
    properties:
      delivery.timeout.ms: 600000
      retry.backoff.ms: 3000
      max.request.size: 2097176

  # Bootstrap DB
  flyway:
    url: jdbc:${application.persistence.url}
    user: ${application.persistence.username}
    password: ${application.persistence.password}
    locations: "classpath:/db/migration"
    enabled: true

  # R2DBC
  r2dbc:
    url: r2dbc:${application.persistence.url}
    username: ${application.persistence.username}
    password: ${application.persistence.password}
    initialization-mode: always

logging:
  level:
    org.springframework.data.r2dbc: DEBUG
    org.springframework.transaction: TRACE

# ======================================
# Management
# ======================================
server:
  port: 8081

management:
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - metrics
          - prometheus
  endpoint:
    metrics.enabled: true
    health.show-details: ALWAYS
info:
  app:
    name: ${application.name}
    port: ${server.port}
